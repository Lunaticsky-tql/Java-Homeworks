package drawing_board;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JColorChooser;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JPanel;


public class Setting extends JDialog implements ActionListener{
	Color[] colors = {Color.black,Color.red,Color.green,Color.blue,Color.yellow};
	private static final long serialVersionUID = 1L;
	public static final int TRIANGLE=0;
	public static final int LINE=1;
	public static final int OVAL=2;
	public static final int SQUARE=3;
	public static final int TEXT=4;
	// 主面板
	private JPanel content;
	// label
	private JLabel backLabel;
	private JLabel ovalLabel;
	private JLabel triaLabel;
	private JLabel lineLabel;
	private JLabel textLabel;
	// button
	private JComboBox<Color> backColor;
	private JComboBox<Color> ovalColor;
	private JComboBox<Color> triaColor;
	private JComboBox<Color> lineColor;
	private JComboBox<Color> textColor;
	// combox
	private JComboBox ovalSize;
	private JComboBox triaSize;
	private JComboBox lineSize;
	private JComboBox textFace;// 字体
	private JComboBox textStyle;// 样式
	private JComboBox textSize;// 大小
	// button
	private JButton okButton;
	private JButton quitButton;
	
	private DrawingBoard board;
	
	/** 画笔大小集合 */
	private final String STROKES[] = new String[] { "10.0px", "8.0px", "6.5px", "4.0px", "2.5px", "2.0px" };
	/** 文字字体集合 */
	private final String FACES[] = new String[] { "楷体", "隶书", "宋体", "华文彩云", "华文行楷", "微软雅黑" };
	/** 文字样式集合 */
	private final String STYLE[] = new String[] { "Plain", "Bold", "Italic" };
	/** 文字大小集合 */
	private final String SIZES[] = new String[] { "20", "22", "24", "26", "28", "30", "32", "34", "36", "38", "40", "42", "44", "46", "48", "50" };

	// 全局字体
	private static final Font FONT = new Font("微软雅黑", Font.PLAIN, 12);

	public Setting(DrawingBoard board) {
		this.board = board;
		initGUI();
	}

	private void initGUI() {
		setModal(true);
		setSize(480, 300);
		setTitle("Setting");
		setResizable(false);
		setDefaultCloseOperation(DISPOSE_ON_CLOSE);

		content = new JPanel();
		content.setLayout(null);
		getContentPane().add(content);
		
		backLabel = new JLabel("background:");
		backLabel.setBounds(10, 10, 50, 25);
		backLabel.setFont(FONT);
		content.add(backLabel);
		
		backColor = new JComboBox<Color>(colors);
//		backColor.setBounds(85, 10, 80, 25);
//		ComboBoxRenderer renderer = new ComboBoxRenderer();
//		renderer.setPreferredSize(new Dimension(50, 25));
//		backColor.setRenderer(renderer);
		content.add(backColor);

		ovalLabel = new JLabel("circle");
		ovalLabel.setBounds(10, 55, 55, 25);
		ovalLabel.setFont(FONT);
		content.add(ovalLabel);

		ovalColor = new JButton();
		ovalColor.setBackground(board.colorMap.get(OVAL));
		ovalColor.setBounds(85, 55, 80, 25);
		ovalColor.setPreferredSize(new Dimension(50, 25));
		ovalColor.addActionListener(this);
		content.add(ovalColor);

		ovalSize = new JComboBox;
		ovalSize.setBounds(190, 55, 80, 25);
		ovalSize.setFont(FONT);
		ovalSize.setModel(new DefaultComboBoxModel(STROKES));
		ovalSize.setSelectedItem(transToString(board.oval_stroke));
		ovalSize.addActionListener(this);
		content.add(ovalSize);

		triaLabel = new JLabel("三角形：");
		triaLabel.setBounds(10, 100, 55, 25);
		triaLabel.setFont(FONT);
		content.add(triaLabel);
		triaColor = new JButton();
		triaColor.setBackground(board.tria_color);
		triaColor.setBounds(85, 100, 80, 25);
		triaColor.setPreferredSize(new Dimension(50, 25));
		triaColor.addActionListener(this);
		content.add(triaColor);

		triaSize = new JComboBox();
		triaSize.setBounds(190, 100, 80, 25);
		triaSize.setFont(FONT);
		triaSize.setModel(new DefaultComboBoxModel(STROKES));
		triaSize.setSelectedItem(transToString(board.tria_stroke));
		triaSize.addActionListener(this);
		content.add(triaSize);

		lineLabel = new JLabel("线   条：");
		lineLabel.setBounds(10, 145, 55, 25);
		lineLabel.setFont(FONT);
		content.add(lineLabel);

		lineColor = new JButton();
		lineColor.setBounds(85, 145, 80, 25);
		lineColor.setBackground(board.line_color);
		lineColor.setPreferredSize(new Dimension(50, 25));
		lineColor.addActionListener(this);
		content.add(lineColor);

		lineSize = new JComboBox();
		lineSize.setBounds(190, 145, 80, 25);
		lineSize.setFont(FONT);
		lineSize.setModel(new DefaultComboBoxModel(STROKES));
		lineSize.setSelectedItem(transToString(board.line_stroke));
		lineSize.addActionListener(this);
		content.add(lineSize);

		textLabel = new JLabel("文   字：");
		textLabel.setBounds(10, 190, 55, 25);
		textLabel.setFont(FONT);
		content.add(textLabel);

		textColor = new JButton();
		textColor.setBounds(85, 190, 80, 25);
		textColor.setBackground(board.text_color);
		textColor.setPreferredSize(new Dimension(50, 25));
		textColor.addActionListener(this);
		content.add(textColor);

		textFace = new JComboBox();
		textFace.setBounds(190, 190, 80, 25);
		textFace.setFont(FONT);
		textFace.setModel(new DefaultComboBoxModel(FACES));
		textFace.setSelectedItem(board.text_face);
		textFace.addActionListener(this);
		content.add(textFace);

		textStyle = new JComboBox();
		textStyle.setBounds(290, 190, 80, 25);
		textStyle.setFont(FONT);
		textStyle.setModel(new DefaultComboBoxModel(STYLE));
		textStyle.setSelectedItem(getStyleStr(board.text_style));
		textStyle.addActionListener(this);
		content.add(textStyle);

		textSize = new JComboBox();
		textSize.setBounds(390, 190, 80, 25);
		textSize.setFont(FONT);
		textSize.setModel(new DefaultComboBoxModel(SIZES));
		textSize.setSelectedItem(String.valueOf(board.text_size));
		textSize.addActionListener(this);
		content.add(textSize);

		okButton = new JButton("确定");
		okButton.setBounds(85, 235, 80, 30);
		okButton.setFont(FONT);
		okButton.addActionListener(this);
		content.add(okButton);

		quitButton = new JButton("取消");
		quitButton.setBounds(290, 235, 80, 30);
		quitButton.setFont(FONT);
		quitButton.addActionListener(this);
		content.add(quitButton);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		if (e.getSource() == backColor) {
			Color color = JColorChooser.showDialog(this, "选择画板背景", board.getBackground());
			backColor.setBackground(color);
		}
		if (e.getSource() == ovalColor) {
			Color color = JColorChooser.showDialog(this, "选择画笔颜色", board.oval_color);
			ovalColor.setBackground(color);
		}
		if (e.getSource() == triaColor) {
			Color color = JColorChooser.showDialog(this, "选择画笔颜色", board.tria_color);
			triaColor.setBackground(color);
		}
		if (e.getSource() == lineColor) {
			Color color = JColorChooser.showDialog(this, "选择画笔颜色", board.line_color);
			lineColor.setBackground(color);
		}
		if (e.getSource() == textColor) {
			Color color = JColorChooser.showDialog(this, "选择画笔颜色", board.text_color);
			textColor.setBackground(color);
		}
		if (e.getSource() == okButton) {
			// color
			board.setBackground(backColor.getBackground());
			board.oval_color = ovalColor.getBackground();
			board.tria_color = triaColor.getBackground();
			board.line_color = lineColor.getBackground();
			board.text_color = textColor.getBackground();
			// size
			board.oval_stroke = transToFloat(ovalSize);
			board.tria_stroke = transToFloat(triaSize);
			board.line_stroke = transToFloat(lineSize);
			// text特殊处理
			board.text_face = String.valueOf(textFace.getSelectedItem());
			if (String.valueOf(textStyle.getSelectedItem()).equals("常规")) {
				board.text_style = Font.PLAIN;
			}
			if (String.valueOf(textStyle.getSelectedItem()).equals("粗体")) {
				board.text_style = Font.BOLD;
			}
			if (String.valueOf(textStyle.getSelectedItem()).equals("斜体")) {
				board.text_style = Font.ITALIC;
			}
			board.text_size = Integer.valueOf(String.valueOf(textSize.getSelectedItem()));
			// close
			dispose();
		}
		if (e.getSource() == quitButton) {
			dispose();
		}
	}

	/**
	 * 将float转成string （px） 只针对stroke之间转换，不共用
	 * 
	 * @param value
	 * @return
	 */
	private String transToString(float value) {
		String temp = String.valueOf(value);
		return temp + "px";
	}

	/**
	 * 将string转成float 只针对stroke之间转换，不共用
	 * 
	 * @param object
	 *            jcombox对象
	 * @return
	 */
	private float transToFloat(Object object) {
		String temp = ((JComboBox) object).getSelectedItem().toString();
		return Float.parseFloat(temp.substring(0, temp.length() - 2));
	}

	/**
	 * 根据字体编码获取名称
	 * 
	 * @param style
	 *            字体编码
	 * @return
	 */
	private String getStyleStr(int style) {
		if (style == Font.PLAIN) {
			return "常规";
		}
		if (style == Font.BOLD) {
			return "粗体";
		}
		if (style == Font.ITALIC) {
			return "斜体";
		}
		return null;
	}

}